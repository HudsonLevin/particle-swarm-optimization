import pandas as pd
import numpy as np
import random
import matplotlib.pyplot as plt

# อ่านข้อมูล
df = pd.read_excel('AirQualityUCI.xlsx')

# เลือก attribute ที่จะใช้เป็น input และ output
input_attr = [3, 6, 8, 10, 11, 12, 13, 14]
output_attr = [5]
inputs = df.iloc[:, input_attr].values
outputs = df.iloc[:, output_attr].values

# แบ่งข้อมูลสำหรับ cross-validation
def train_test_split(data, test_size=0.1):
    n_test = int(len(data) * test_size)
    indices = list(range(len(data)))
    random.shuffle(indices)
    test_indices = indices[:n_test]
    train_indices = indices[n_test:]
    return data[train_indices], data[test_indices]

X_train, X_test = train_test_split(inputs)
y_train, y_test = train_test_split(outputs)

# ฟังก์ชั่นสำหรับการสร้าง MLP
def create_mlp(input_dim, hidden_layers, output_dim):
    network = []
    for h in hidden_layers:
        network.append(np.random.randn(input_dim, h))
        input_dim = h
    network.append(np.random.randn(input_dim, output_dim))
    return network

# ฟังก์ชั่นสำหรับการฟีดฟอร์เวิร์ด
def forward(network, inputs):
    for layer in network:
        inputs = np.dot(inputs, layer)
    return inputs

# ฟังก์ชั่นสำหรับการคำนวณ Mean Absolute Error (MAE)
def mean_absolute_error(y_true, y_pred):
    return np.mean(np.abs(y_true - y_pred))

# ฟังก์ชั่นสำหรับการอัพเดท PSO
def pso_update(particles, velocities, pbest, gbest, c1=2, c2=2, w=0.5):
    for i in range(len(particles)):
        for j in range(len(particles[i])):
            r1, r2 = random.random(), random.random()
            velocities[i][j] = (w * velocities[i][j] +
                                c1 * r1 * (pbest[i][j] - particles[i][j]) +
                                c2 * r2 * (gbest[j] - particles[i][j]))
            particles[i][j] += velocities[i][j]

# การตั้งค่าพารามิเตอร์ PSO
num_particles = 30
hidden_layers = [10, 10]
input_dim = len(input_attr)
output_dim = len(output_attr)
particles = [create_mlp(input_dim, hidden_layers, output_dim) for _ in range(num_particles)]
velocities = [[np.zeros_like(layer) for layer in particle] for particle in particles]
pbest = particles.copy()
pbest_mae = [float('inf')] * num_particles
gbest = particles[0]
gbest_mae = float('inf')

# การฝึก MLP โดยใช้ PSO
epochs = 100
train_mae_over_epochs = []

for epoch in range(epochs):
    epoch_mae = []
    for i in range(num_particles):
        y_pred = forward(particles[i], X_train)
        mae = mean_absolute_error(y_train, y_pred)
        epoch_mae.append(mae)
        if mae < pbest_mae[i]:
            pbest[i] = particles[i]
            pbest_mae[i] = mae
        if mae < gbest_mae:
            gbest = particles[i]
            gbest_mae = mae
    train_mae_over_epochs.append(np.mean(epoch_mae))
    pso_update(particles, velocities, pbest, gbest)

# ทดสอบโมเดล
y_pred_test = forward(gbest, X_test)
test_mae = mean_absolute_error(y_test, y_pred_test)
print(f'Test MAE: {test_mae:.4f}')

# Plot the training MAE over epochs
plt.plot(range(epochs), train_mae_over_epochs)
plt.xlabel('Epoch')
plt.ylabel('Training Mean Absolute Error (MAE)')
plt.title('Training MAE Over Epochs')
plt.show()
